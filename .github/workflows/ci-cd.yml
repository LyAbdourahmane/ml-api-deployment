name: CI-CD

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    runs-on: ubuntu-latest
    env:
      PYTHONPATH: ${{ github.workspace }}

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: ml
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U postgres -d ml"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout (with LFS)
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --no-cache-dir -r requirements.txt

      - name: Verify model artifacts exist
        run: |
          ls -lah models
          test -f models/model_emissions_co2.joblib
          test -f models/model_metadata.joblib

      - name: Init database schema
        env:
          ENV: test
          AUTH_ENABLED: "false"
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: ml
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/ml
          PGCLIENTENCODING: UTF8
        run: python -m infra.create_db

      - name: Run tests + coverage
        env:
          ENV: test
          AUTH_ENABLED: "false"
          DB_USER: postgres
          DB_PASSWORD: postgres
          DB_HOST: 127.0.0.1
          DB_PORT: 5432
          DB_NAME: ml
          DATABASE_URL: postgresql+psycopg2://postgres:postgres@127.0.0.1:5432/ml
          PGCLIENTENCODING: UTF8
        run: |
          pytest -q \
            --maxfail=1 --disable-warnings \
            --cov=app --cov=infra --cov=src --cov-report=term-missing \
            --cov-fail-under=60


  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: ${{ needs.test.result == 'success' && github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    env:
      # Configurer des secrets dans GitHub: Settings > Secrets and variables > Actions (pour ne pas que j'oublie)
      RENDER_DEPLOY_HOOK_API: ${{ secrets.RENDER_DEPLOY_HOOK_API }}
      RENDER_DEPLOY_HOOK_GRADIO: ${{ secrets.RENDER_DEPLOY_HOOK_GRADIO }}
    steps:
      - name: Trigger Render deploy hook (API)
        if: ${{ env.RENDER_DEPLOY_HOOK_API != '' }}
        run: |
          echo "Triggering Render API deploy..."
          curl -fsS -X POST "$RENDER_DEPLOY_HOOK_API"
          echo "OK: API deploy triggered."

      - name: Trigger Render deploy hook (Gradio)  # optionnel pour le service gradio
        if: ${{ env.RENDER_DEPLOY_HOOK_GRADIO != '' }}
        run: |
          echo "Triggering Render Gradio deploy..."
          curl -fsS -X POST "$RENDER_DEPLOY_HOOK_GRADIO"
          echo "OK: Gradio deploy triggered."
